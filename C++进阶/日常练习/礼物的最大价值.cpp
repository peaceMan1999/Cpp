#define _CRT_SECURE_NO_WARNINGS 1

/*
在一个m\times nm×n的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。
你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。
给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？
如输入这样的一个二维数组，
[
[1,3,1],
[1,5,1],
[4,2,1]
]
那么路径 1→3→5→2→1 可以拿到最多价值的礼物，价值为12
*/

class Solution {
public:

    int maxValue(vector<vector<int> >& grid) {
        int y = grid[0].size();
        int x = grid.size();
        vector<vector<int>> dp(x, vector<int>(y, 0));
        dp[0][0] = grid[0][0];
        for (int i = 1; i < x; i++)
        {
            dp[i][0] = grid[i][0] + dp[i - 1][0];
        }
        for (int j = 1; j < y; j++)
        {
            dp[0][j] = grid[0][j] + dp[0][j - 1];
        }

        for (int i = 1; i < x; i++)
        {
            for (int j = 1; j < y; j++)
            {
                dp[i][j] = max(dp[i - 1][j] + grid[i][j], dp[i][j - 1] + grid[i][j]);
            }
        }
        return dp[x - 1][y - 1];
    }
};