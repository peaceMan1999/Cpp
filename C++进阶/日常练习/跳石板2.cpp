/*

小易来到了一条石板路前，每块石板上从1挨着编号为：1、2、3.......
这条石板路要根据特殊的规则才能前进：对于小易当前所在的编号为K的 石板，
小易单次只能往前跳K的一个约数(不含1和K)步，即跳到K+X(X为K的一个非1和本身的约数)的位置。 
小易当前处在编号为N的石板，他想跳到编号恰好为M的石板去，小易想知道最少需要跳跃几次可以到达。
例如：
N = 4，M = 24：
4->6->8->12->18->24
于是小易最少需要跳跃5次，就可以从4号石板跳到24号石板
输入描述：
输入为一行，有两个整数N，M，以空格隔开。 (4 ≤ N ≤ 100000) (N ≤ M ≤ 100000)
输出描述：
输出小易最少需要跳跃的步数,如果不能到达输出-1

*/

#include <iostream>
#include <vector>
#include <limits.h>
#include <math.h>

using std::cout;
using std::cin;
using std::endl;

void GetNum(std::vector<int>& num, int n)
{
    for (int i = 2; i <= sqrt(n); i++)
    {
        if (n % i == 0) {
            num.push_back(i);
            if (n / i != i) {
                num.push_back(n / i);
            }
        }
    }
}


int GetFloor(std::vector<int>& vv, int n, int m)
{
    for (int i = n; i <= m; i++)
    {
        if (vv[i] == INT_MAX) {
            continue;
        }
        std::vector<int> num;
        GetNum(num, i);
        for (int j = 0; j < num.size(); j++)
        {
            if (num[j] + i <= m && vv[i] != INT_MAX)
            {
                vv[num[j] + i] = vv[i] + 1 < vv[num[j] + i] ? vv[i] + 1 : vv[num[j] + i];
            }
        }
    }

    return vv[m] == INT_MAX ? -1 : vv[m];
}

int main()
{
    int n, m;
    cin >> n >> m;
    std::vector<int> vv(m + 1, INT_MAX);
    vv[n] = 0;

    cout << GetFloor(vv, n, m) << endl;

    return 0;
}

