#define _CRT_SECURE_NO_WARNINGS 1

/*
Levenshtein 距离，又称编辑距离，指的是两个字符串之间，由一个转换成另一个所需的最少编辑操作次数。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。编辑距离的算法是首先由俄国科学家 Levenshtein 提出的，故又叫 Levenshtein Distance 。

例如：

字符串A: abcdefg

字符串B: abcdef

通过增加或是删掉字符 ”g” 的方式达到目的。这两种方案都需要一次操作。把这个操作所需要的次数定义为两个字符串的距离。

要求：

给定任意两个字符串，写出一个算法计算它们的编辑距离。
*/

#include <iostream>
#include <vector>
#include <string>
using namespace std;

int GetCount(string& str1, string& str2)
{
    int len1 = str1.size();
    int len2 = str2.size();
    if (len1 == 0 || len2 == 0)
        return max(len1, len2);

    vector<vector<int>> vv(len1 + 1, vector<int>(len2 + 1, 0));
    for (int i = 1; i <= len1; i++)
    {
        vv[i][0] = i;
    }
    for (int i = 1; i <= len2; i++)
    {
        vv[0][i] = i;
    }

    for (int i = 1; i <= len1; i++)
    {
        for (int j = 1; j <= len2; j++)
        {
            if (str1[i - 1] == str2[j - 1])
            {
                vv[i][j] = 1 + min(vv[i - 1][j], vv[i][j - 1]);
                vv[i][j] = min(vv[i][j], vv[i - 1][j - 1]);
            }
            else  //str1[i] != str2[i]
            {
                vv[i][j] = 1 + min(vv[i - 1][j], vv[i][j - 1]);
                vv[i][j] = min(vv[i][j], 1 + vv[i - 1][j - 1]);
            }
        }
    }

    return vv[len1][len2];
}

int main()
{
    string str1, str2;
    while (cin >> str1 >> str2)
    {
        cout << GetCount(str1, str2) << endl;
    }

    return 0;
}

/*
春节期间小明使用微信收到很多个红包，非常开心。在查看领取红包记录时发现，某个红包金额出现的次数超过了红包总数的一半。请帮小明找到该红包金额。写出具体算法思路和代码实现，要求算法尽可能高效。

给定一个红包的金额数组 gifts 及它的大小 n ，请返回所求红包的金额。

若没有金额超过总数的一半，返回0。
*/

class Gift {
public:
    int getValue(vector<int> gifts, int n) {
        // write code here
        sort(gifts.begin(), gifts.end());
        int mid = gifts[n / 2];
        int count = 0;
        for (auto e : gifts)
        {
            if (e == mid)
                count++;
        }
        if (count > n / 2)
            return mid;
        return 0;
        /*map<int, int> vc;
        for (auto e : gifts)
        {
            vc[e]++;
        }
        for (const auto& e : vc)
        {
            if (e.second > n/2)
                return e.first;
        }
        return 0;*/
    }
};
